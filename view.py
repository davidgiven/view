from commands import *
import acorn

load(0x8000, "view-b3.0.rom", "65c02")

acorn.bbc()
acorn.is_sideways_rom()
config.set_show_stats(True)
config.set_show_autogenerated_labels(False)
config.set_label_references(True)
config.set_include_assertions(False)
config.set_hex_dump(True)


def inline_string_hook(target, addr):
    n = stringhiz(addr + 3)
    b = get_u8_binary(n)
    if b == 0:
        return n + 1
    return None


def decode_parser_table(addr):
    saddr = addr
    name = ""
    index = 0
    while True:
        b = get_u8_binary(addr)
        if b == 0:
            break
        if b >= 0x80:
            comment(saddr, f"'{name}' -> {index}, flag={b & 0x7f}")
            byte(saddr, len(name))

            name = ""
            saddr = addr + 1
            index += 1
        else:
            name += chr((b ^ ord("[")) & 0xDF)
        addr += 1


def labelword(addr, name):
    word(addr, 2)
    label(addr, name)
    expr_label(addr + 0, f"{name}+0")
    expr_label(addr + 1, f"{name}+1")


def immaddr(addr_lo, addr_hi):
    addr_lo = memorymanager.BinaryAddr(addr_lo)
    addr_hi = memorymanager.BinaryAddr(addr_hi)
    label = get_label(
        (memory_binary[addr_hi] << 8) | memory_binary[addr_lo],
        addr_lo,
        binary_addr_type=BinaryAddrType.BINARY_ADDR_IS_AT_LABEL_USAGE,
    )
    lo_runtime_addr = movemanager.b2r(addr_lo)
    hi_runtime_addr = movemanager.b2r(addr_hi)
    auto_expr(lo_runtime_addr, make_lo(label))
    auto_expr(hi_runtime_addr, make_hi(label))

constant(0x84, "MAX_LINE_LENGTH")

subroutine(0xA7FA, "print_inline_string")
hook_subroutine(0xA7FA, "print_inline_string", inline_string_hook)

labelword(0x00, "ptr1")
labelword(0x02, "current_edit_line_ptr")
labelword(0x04, "current_format_line_ptr")
labelword(0x06, "current_ruler_ptr")
labelword(0x08, "ptr4")
label(0x0A, "zp_initialisation_canary")
labelword(0x0B, "page")
labelword(0x0D, "top")
labelword(0x0F, "himem")
labelword(0x13, "ptr6")
labelword(0x15, "ptr5")
labelword(0x19, "first_macro_ptr")
labelword(0x1B, "last_macro_ptr")
labelword(0x1d, "ptr3")
labelword(0x1F, "oshwm")
labelword(0x5F, "area_start_ptr")
labelword(0x61, "area_end_ptr")
labelword(0x7F, "input_buffer_ptr")
label(0x22, "top_margin")
label(0x23, "bottom_margin")
label(0x24, "header_margin")
label(0x25, "footer_margin")
label(0x26, "page_length")
label(0x27, "line_spacing")
label(0x28, "footers_enabled_flag")
label(0x29, "headers_enabled_flag")
label(0x2A, "highlight1_code")
label(0x2B, "highlight2_code")
label(0x2C, "rhs_extra_margin")
label(0x2D, "macro_executing_flag")
label(0x2E, "two_sided_flag")
label(0x2F, "left_margin")
label(0x35, "screen_height")
label(0x36, "screen_width")
label(0x37, "current_screen_mode")
label(0x3e, "ruler_right_stop")
label(0x3f, "ruler_left_stop")
label(0x40, "xpos")
labelword(0x4b, "ptr2")
label(0x4D, "rw_file_handle")
label(0x4E, "error_handling_mode")
label(0x4F, "format_mode_flag")
label(0x50, "justifying_flag")
label(0x51, "insert_mode_flag")
label(0x52, "is_tube_flag")
label(0x69, "print_flags")
label(0x6A, "edit_input_file_handle")
label(0x6B, "edit_output_file_handle")
label(0x6c, "microspacing_flag")
label(0x77, "ypos")
label(0x78, "print_xpos")
label(0x7B, "current_tab_key")
label(0x7c, "folding_flag")
label(0x85, "tmp0")
label(0x86, "tmp1")
label(0x87, "tmp2")
label(0x88, "tmp3")
label(0x89, "tmp4")
label(0x8A, "tmp5")
label(0x8B, "tmp6")
label(0x8C, "tmp7")
label(0x8D, "tmp8")
label(0x8E, "tmp9")
word(0x53, 6)
labelword(0x53, "markers_array")
labelword(0x17, "printer_driver_ptr")
expr(0x948C, make_lo("printer_driver_block"))
expr(0x948E, make_hi("printer_driver_block"))
word(0x8D)
label(0xff, "escape_flag")

expr_label(0x400, "printer_driver_block")
expr(0x8802, make_lo("printer_driver_block"))
expr(0x8807, make_hi("printer_driver_block"))
expr_label(0x500, "input_buffer")
expr(0x820B, make_lo("input_buffer"))
expr(0x820F, make_hi("input_buffer"))
label(0x75C, "filename")
expr(0x894D, make_lo("filename"))
expr(0x8952, make_hi("filename"))
label(0x770, "another_filename")
label(0x7EC, "document_filename")
label(0x654, "output_buffer")
label(0x7CC, "line_lengths")
expr_label(0x7CD, "line_lengths+1")
byte(0x7CC, 32)
label(0xDF0, "rom_workspace_array")
label(0x5CE, "document_initialisation_canary")
label(0x545, "current_line_buffer")
byte(0x545, 0x83)
byte(0x5CF, 0x83)
label(0x5CF, "current_ruler_buffer")
label(0x6d8, "header_text_maybe")
label(0x71a, "footer_text_maybe")

label(0x784, "printer_driver_name")
byte(0x798, 26)
label(0x798, "register_value_array")
labelword(0x7AE, "register_value_l")
labelword(0x7B6, "register_value_p")
wordentry(0x94B1)
label(0x94B1, "default_printer_driver_ptr")
subroutine(0x94B3, "default_printer_driver")
entry(0x94B6)
entry(0x94B9)
entry(0x94BC)
entry(0x94BF)

expr_label(0x80B8, "word_command_str")

label(0x9BD0, "enter_printable_character")
label(0x9BAC, "enter_nonprintable_character")
label(0xB14C, "non_function_key_table")
label(0x8062, "help_handler")
label(0x8085, "osbyte_handler")
label(0x8079, "claim_private_workspace_handler")
label(0x8073, "exit_from_service_call")
label(0xA69C, "emit_to_output_buffer_callback")

subroutine(0x8021, "service_handler")
subroutine(0x80F6, "run_cli")
subroutine(0x81F6, "cli_loop")
subroutine(0x83a0, "expand_escaped_string")
subroutine(0x8445, "print_to_screen")
subroutine(0x844B, "stop_printing")
subroutine(0x8839, "parse_integer_from_command")
subroutine(0x8858, "open_file")
subroutine(0x894C, "do_osfile_with_block")
subroutine(0x895D, "sanitise_area")
subroutine(0x8989, "parse_marks_from_command")
subroutine(0x899F, "parse_mark_from_command")
subroutine(
    0x8D85,
    "close_file_indirect",
    on_entry={"x": "address of ZP var containing handle"},
)
subroutine(0x8C6B, "is_uppercase")
subroutine(0x8D15, "get_byte_from_file")
subroutine(0x8D79, "put_byte_to_file")
subroutine(0x8D8F, "close_file")
subroutine(0x8E63, "error_if_cassette_filesystem")
subroutine(0x8E7D, "test_for_cassette_filesystem")
subroutine(0x8e86, "check_for_bad_document")
subroutine(0x8eae, "display_nl_then_no_text")
subroutine(0x8eb1, "display_no_text")
subroutine(0x9011, "nested_subroutine_error")
subroutine(0x9299, "render_new_page")
subroutine(0x9310, "render_header_or_footer")
subroutine(0x9424, "print_vertical_space", on_entry={"x": "number of lines"})
subroutine(0x9455, "print_newline")
subroutine(0x9457, "print_char")
subroutine(0x946B, "print_char_just_to_printer")
subroutine(0x948B, "prepare_printer_driver")
subroutine(0x94A3, "call_printer_driver")
subroutine(0x952B, "expand_line")
subroutine(0x9645, "page_eject_fmt")
subroutine(0x9730, "lookup_formatting_command")
subroutine(0x9755, "execute_formatting_command")
subroutine(0x9762, "parse_boolean_from_fmt_cmd")
subroutine(0x97B8, "evaluate_expression_from_fmt_cmd")
subroutine(0x9824, "get_next_fmt_cmd_byte")
subroutine(0x9825, "get_current_fmt_cmd_byte")
subroutine(0x9b33, "run_editor")
subroutine(0x9B36, "editor_loop")
subroutine(0xa558, "detect_mode_7")
subroutine(0xA565, "set_normal_text_if_not_mode_7")
subroutine(0xA577, "set_inverted_text_if_not_mode_7")
subroutine(0xA58E, "set_text_colour")
subroutine(0xA640, "display_status_word")
subroutine(0xA67F, "home_cursor")
subroutine(
    0xA68C,
    "render_number_to_output_buffer",
    on_entry={"tmp9/tmp8": "16-bit number"},
)
subroutine(0xA6B2, "render_number_to_screen", on_entry={"YX": "16-bit number"})
subroutine(
    0xA6BA,
    "render_number_to_callback",
    on_entry={"tmp8/tmp9": "16-bit number", "YA": "callback"},
)
subroutine(0xA75A, "flush_and_read_char")
subroutine(0xA761, "read_char")
subroutine(0xA76E, "acknowledge_escape")
subroutine(0xA782, "clear_screen")
subroutine(0xA786, "cursor_off")
subroutine(0xA78B, "complete_CRTC_10_write")
subroutine(0xA799, "setup_CRTC_10_write")
subroutine(0xA7A8, "draw_prompt_characters")
subroutine(0xA7CD, "cursor_on")
subroutine(0xA7DC, "save_cursor_position")
subroutine(0xA7E6, "restore_cursor_position")
subroutine(0xA7EA, "set_cursor_position")
subroutine(0xA82A, "print_x_words_of_help")
subroutine(0xA847, "parse_command")
subroutine(0xA892, "call_through_jumptable")
subroutine(0xAAF1, "get_line_length")
subroutine(0xaba2, "find_margins_of_current_ruler")
subroutine(0xACE8, "beep")
subroutine(0xACEF, "lookup_marker")
subroutine(0xACFD, "reset_area_to_entire_document")
subroutine(0xAD0E, "clear_marks_1_2")
subroutine(0xAD18, "reset_area_to_marks_1_2")
subroutine(0xAD69, "get_register_address", on_entry={"a": "register name"})
subroutine(
    0xAD81,
    "render_register",
    on_entry={"tmp7/tmp6": "pointer to register", "a": "register name"},
)
subroutine(0xADA7, "render_date_time_to_output_buffer")
subroutine(0xaf79, "system_init")
subroutine(0xAFB0, "detect_tube")
subroutine(0xAFBE, "compute_bytes_free")
subroutine(0xafca, "initialise_document_if_document_bad")
subroutine(0xAFCF, "initialise_document")
subroutine(0xB09B, "enter_editor_mode")
subroutine(0xB0E0, "create_default_ruler")
subroutine(0xB2FD, "get_next_bit_of_relocation_table")
subroutine(0xB328, "create_go_command")

subroutine(0x823B, "esc_key")
subroutine(0x9D7B, "return_key")
subroutine(0x9E00, "delete_key")
subroutine(0x9E30, "tab_key")
subroutine(0xA03C, "f0_format_block_key")
subroutine(0xA05E, "f1_top_of_text_key")
subroutine(0xA09C, "f2_bottom_of_text_key")
subroutine(0x9EDD, "f3_delete_to_eol_key")
subroutine(0x9E92, "f4_beginning_of_line_key")
subroutine(0x9E99, "f5_end_of_line_key")
subroutine(0x9DD8, "f6_insert_line_key")
subroutine(0x9E50, "f7_delete_line_key")
subroutine(0x9E20, "f8_insert_char_key")
subroutine(0x9E49, "f9_delete_char_key")
subroutine(0xA1B7, "f11_copy_key")
subroutine(0x9D54, "f12_left_key")
subroutine(0x9D4B, "f13_right_key")
subroutine(0x9D74, "f14_down_key")
subroutine(0x9D5B, "f15_up_key")
subroutine(0xA194, "sf0_move_block_key")
subroutine(0x9D3C, "sf1_swap_case_key")
subroutine(0x9E86, "sf2_release_margins_key")
subroutine(0xA102, "sf3_delete_to_char_key")
subroutine(0x9E34, "sf4_highlight1_key")
subroutine(0x9E38, "sf5_highlight2_key")
subroutine(0xA024, "sf6_go_to_marker_key")
subroutine(0xA012, "sf7_set_marker_key")
subroutine(0x9EE8, "sf8_edit_command_key")
subroutine(0x9F62, "sf9_delete_command_key")
subroutine(0xA0DB, "sf11_copy_key")
subroutine(0x9F9D, "sf12_left_key")
subroutine(0x9FE3, "sf13_right_key")
subroutine(0xA0A9, "sf14_down_key")
subroutine(0xA06B, "sf15_up_key")
subroutine(0xA177, "cf0_delete_block_key")
subroutine(0xA268, "cf1_next_match_key")
subroutine(0xA154, "cf2_format_mode_key")
subroutine(0xA165, "cf3_justify_mode_key")
subroutine(0xA16E, "cf4_insert_mode_key")
subroutine(0xA0F2, "cf5_default_ruler_key")
subroutine(0x9DB1, "cf6_split_line_key")
subroutine(0x9EA1, "cf7_join_lines_key")
subroutine(0x9F3B, "cf8_mark_as_ruler_key")

expr(0x8D86, "0")
expr(0x8D8E, "0")
expr(0x8514, "edit_input_file_handle")
expr(0x8519, "edit_output_file_handle")
expr(0xAD75, make_lo("register_value_array"))
expr(0xAD79, make_hi("register_value_array"))

subroutine(0x850A, "quit_cmd")
subroutine(0x8797, "new_cmd")
subroutine(0x874E, "format_cmd")
subroutine(0x863F, "setup_cmd")
subroutine(0x8558, "read_cmd")
subroutine(0x84AE, "more_cmd")
subroutine(0x8427, "screen_cmd")
subroutine(0x842F, "sheets_cmd")
subroutine(0x8906, "save_cmd")
subroutine(0x869E, "count_cmd")
subroutine(0x8684, "field_cmd")
subroutine(0x87DD, "printer_cmd")
subroutine(0x8286, "search_cmd")
subroutine(0xB091, "clear_cmd")
subroutine(0x85F8, "microspace_cmd")
subroutine(0x879D, "fold_cmd")
subroutine(0x88E6, "name_cmd")
subroutine(0x85B6, "mode_cmd")
subroutine(0x84EB, "finish_cmd")
subroutine(0x8440, "print_cmd")
subroutine(0x82A1, "change_cmd")
subroutine(0x851D, "write_cmd")
subroutine(0x8468, "edit_cmd")
subroutine(0x831D, "replace_cmd")
subroutine(0x8877, "load_cmd")

subroutine(0x94D9, "ce_fmt_cmd")
subroutine(0x94F8, "rj_fmt_cmd")
subroutine(0x9571, "df_fmt_cmd")
subroutine(0x956B, "dh_fmt_cmd")
subroutine(0x966D, "dm_fmt_cmd")
subroutine(0x95BA, "em_fmt_cmd")
subroutine(0x9623, "pe_fmt_cmd")
subroutine(0x95F3, "tm_fmt_cmd")
subroutine(0x95FB, "bm_fmt_cmd")
subroutine(0x95DC, "pl_fmt_cmd")
subroutine(0x95E4, "ts_fmt_cmd")
subroutine(0x964F, "fo_fmt_cmd")
subroutine(0x9659, "he_fmt_cmd")
subroutine(0x9702, "ht_fmt_cmd")
subroutine(0x9603, "hm_fmt_cmd")
subroutine(0x960B, "fm_fmt_cmd")
subroutine(0x9613, "lm_fmt_cmd")
subroutine(0x961B, "ls_fmt_cmd")
subroutine(0x9634, "op_fmt_cmd")
subroutine(0x963C, "ep_fmt_cmd")
subroutine(0x94D0, "lj_fmt_cmd")
subroutine(0x9663, "pb_fmt_cmd")

label(0x8F94, "lookup_macro_name")
label(0x8FA9, "get_next_macro_in_linked_list")
label(0x96EA, "add_macro_to_linked_list")
label(0x9ef6, "edit_command_loop")
label(0x9f26, "finished_editing_command")
label(0x8241, "input_line_not_escaped")
label(0x8258, "input_line_not_oscli")
label(0xB205, "parser_table")
decode_parser_table(0xB205)

wordentry(0xA69A)
label(0x83df, "escaped_char_table")
for a in range(0, 8):
    string(0x83df+a*2, 1)
    byte(0x83df+a*2+1)

wordentry(0xB151, 4)
expr_label(0xB151, "jumptable_ptrs")
wordentry(0xB159, 52)
expr_label(0xB159, "jumptable1")
wordentry(0xB1C1, 25)
expr_label(0xB1C1, "jumptable2")
wordentry(0xB1F3, 3)
expr_label(0xB1F3, "jumptable3")
wordentry(0xB2CF, 23)
label(0xB2CF, "jumptable4")
stringz(0xB39A)

label(0xB2A0, "commands_table")
for addr in range(0xB2A0, 0xB2CE, 2):
    string(addr, 2)

wordentry(0x80F1)
label(0x80F1, "brk_handler_ptr")
subroutine(0x8A2E, "brk_handler")

immaddr(0xB350, 0xB352)
subroutine(0xB310, "write_hex_to_output_buffer")

label(0xB144, "decimal_table")
word(0xB144, 4)

immaddr(0xA6B7, 0xA6B9)

label(0xB39F, "relocation_table")
immaddr(0xB358, 0xB35C)
immaddr(0xB36C, 0xB366)
immaddr(0xB03E, 0xB040)
immaddr(0x8EEF, 0x8EF3)
immaddr(0x883A, 0x883E)
immaddr(0xB029, 0xB034)
immaddr(0xB04C, 0xB051)
immaddr(0x92E2, 0x92E4)
immaddr(0x956C, 0x956E)
immaddr(0x9572, 0x9574)
immaddr(0x9276, 0x9278)

go()
